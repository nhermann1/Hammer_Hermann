###Lab 8- MRPP and ISA
library(RVAideMemoire)
library(ecodist)
library(vegan)
library(indicspecies)
####import main matrix
SMeso.sp<- read.csv(file.choose(), header=TRUE)
install.packages(c("ecodist", "indicspecies", "RVAideMemoire"))
###Lab 8- MRPP and ISA
library(RVAideMemoire)
library(ecodist)
library(vegan)
library(indicspecies)
####import main matrix
SMeso.sp<- read.csv(file.choose(), header=TRUE)
head(SMeso.sp)
p<-ncol(SMeso.sp)
SMeso.spM<-as.matrix(SMeso.sp[, 2:p])
head(SMeso.spM)
###import second matrix
SMeso.sec<- read.csv(file.choose(), header=TRUE)
head(SMeso.sec)
p.sec<-ncol(SMeso.sec)
SMeso.secM<-as.matrix(SMeso.sec[,5:p.sec])
head(SMeso.secM)
###creating dataframe of descriptors or categorical variables
SMeso.secD<-SMeso.sec[,1:4]
head(SMeso.secD)
###Adding descriptors for categorical variables in second matrix
SMeso.secD$litterD<-NA
SMeso.secD$litterD[SMeso.secD$litter==1]<-"Corn"
SMeso.secD$litterD[SMeso.secD$litter==2]<-"Bromus"
SMeso.secD$ECOtrtD<-NA
SMeso.secD$ECOtrtD[SMeso.secD$treatment==1]<-"Till-Ag"
SMeso.secD$ECOtrtD[SMeso.secD$treatment==2]<-"NoTill-Ag"
SMeso.secD$ECOtrtD[SMeso.secD$treatment==7]<-"OldFldGrass"
SMeso.spM.rowsum<-apply(SMeso.spM, 1, sum)
SMeso.spM.0p<- SMeso.spM[SMeso.spM.rowsum > 0,]
dim(SMeso.spM.0p)
SMeso.secM.0p<-SMeso.secM[SMeso.spM.rowsum > 0,]
dim(SMeso.secM.0p)
SMeso.secD.0p<-SMeso.secD[SMeso.spM.rowsum > 0,]
dim(SMeso.secD.0p)
#### generalized log transformation
glog <- function(x) {
return(log10(x + min(x[x > 0]))-log10(min(x[x > 0])))
}
SMeso.spM.0p.glog<-glog(SMeso.spM.0p)
litterD=as.factor(SMeso.secD.0p$litterD)
ECOtrtD=as.factor(SMeso.secD.0p$ECOtrtD)
time=as.factor(SMeso.secD.0p$time)
#################MRPP######################
####comparing litter
mrpp(SMeso.spM.0p.glog, group=litterD, weight.type=1, permutations=1000, distance="bray")
#################MRPP######################
####comparing litter
mrpp(SMeso.spM.0p.glog, group=SMeso.secD.0p$litterD, weight.type=1, permutations=1000, distance="bray")
###comparing time
mrpp(SMeso.spM.0p.glog, group=time, weight.type=1, permutations=1000, distance="bray")
#####To do pairwise comparisons with mrpp in R we need to manually specify which comparisons we want to make, so it is a bit arduous
##also p values vary slightly with each run
###first comparing 1 to 2
mrpp(SMeso.spM.0p.glog[SMeso.secD.0p$time== 1 | SMeso.secD.0p$time == 2, ], time[time == 1 | time == 2],  weight.type=1, permutations=1000, distance="bray" )
#p=0.000999
###then comparing 1 to 3
mrpp(SMeso.spM.0p.glog[SMeso.secD.0p$time== 1 | SMeso.secD.0p$time == 3, ], time[time == 1 | time == 3],  weight.type=1, permutations=1000, distance="bray" )
mrpp(SMeso.spM.0p.glog[SMeso.secD.0p$time== 2 | SMeso.secD.0p$time == 3, ], time[time == 2 | time == 3],  weight.type=1, permutations=1000, distance="bray" )
###Looking at ecosystem
mrpp(SMeso.spM.0p.glog, group=ECOtrtD, weight.type=1, permutations=1000, distance="bray")
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
mrpp(SMeso.spM.0p.glog[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
mrpp(SMeso.spM.0p.glog[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
mrpp(SMeso.spM.0p.glog[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
#################MRPP######################
####comparing litter
mrpp(SMeso.spM.0p.glog, group=SMeso.secD.0p$litterD, weight.type=1, permutations=1000, distance="bray")
###comparing time
mrpp(SMeso.spM.0p.glog, group=time, weight.type=1, permutations=1000, distance="bray")
###Looking at ecosystem
mrpp(SMeso.spM.0p.glog, group=ECOtrtD, weight.type=1, permutations=1000, distance="bray")
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
##########indicator species analysis##################
litterD=as.factor(SMeso.secD.0p$litterD)
ECOtrtD=as.factor(SMeso.secD.0p$ECOtrtD)
time=as.factor(SMeso.secD.0p$time)
###for some reason the multipatt function to do ISA will only work on data frames, not on matrices... so I converted our matrix into a data frame first
SMeso.spM.0p.glogD<-as.data.frame(SMeso.spM.0p.glog)
### Indval.g is default....the indval.g has a correction for datasets in which the sample size of the groups vary
# we can overwrite this correction by using func="Indval"
SMeso.indval.T.g = multipatt(SMeso.spM.0p.glogD, time, func = "IndVal.g", duleg=TRUE, control = how(nperm=4999))
SMeso.indval.T = multipatt(SMeso.spM.0p.glogD, time, func = "IndVal", duleg=TRUE, control = how(nperm=4999))
summary(SMeso.indval.T.g)
summary(SMeso.indval.T)
##this is a nice way to get which group the species belong into and the indicator value
SMeso.indval.T$sign
summary(SMeso.indval.T.g)
SMeso.indval.T.g$sign
summary(SMeso.indval.T.g)
summary(SMeso.indval.T.g$A)
summary(SMeso.indval.T.g$B)
summary(SMeso.indval.T.g$str)
summary(SMeso.indval.T.g$sign)
SMeso.indval.T.g$sign
SMeso.indval.T.g$A
SMeso.indval.T.g$B
summary(SMeso.indval.T.g)
SMeso.secD.0p17<-SMeso.secD.0p[SMeso.secD.0p$ECOtrtD != "NoTill-Ag", ]
dim(SMeso.secD.0p17)
ECOtrtD17=as.factor(SMeso.secD.0p17$ECOtrtD)
SMeso.spM.0p.glogD17<-SMeso.spM.0p.glogD[SMeso.secD.0p$ECOtrtD != "NoTill-Ag", ]
dim(SMeso.spM.0p.glogD17)
SMeso.indvaleco17 = multipatt(SMeso.spM.0p.glogD17, ECOtrtD17, func = "IndVal", duleg=TRUE, control = how(nperm=4999))
##results
summary(SMeso.indvaleco17)
##results
SMeso.indvaleco17$str
summary(SMeso.indvaleco17)
##results
SMeso.indvaleco17$str
SMeso.indvaleco17$sign
summary(SMeso.indval.T.g)
###in results A is relative abundance and B is relative frequency
###the indicator value is shown in the $str output, and is actually the square root of the indicator value (I am not sure why they take the square root but they do!!)
SMeso.indval.T.g$str
###in results A is relative abundance and B is relative frequency
###the indicator value is shown in the $str output, and is actually the square root of the indicator value (I am not sure why they take the square root but they do!!)
SMeso.indval.T.g$A
###in results A is relative abundance and B is relative frequency
###the indicator value is shown in the $str output, and is actually the square root of the indicator value (I am not sure why they take the square root but they do!!)
SMeso.indval.T.g$B
##this is a nice way to get which group the species belong into and the indicator value
SMeso.indval.T$sign
SMeso.indvaleco17$sign
summary(SMeso.indvaleco17)
###in results A is relative abundance and B is relative frequency
###the indicator value is shown in the $str output, and is actually the square root of the indicator value (I am not sure why they take the square root but they do!!)
SMeso.indval.T.g$str
###Looking at ecosystem
mrpp(SMeso.spM.0p.glog, group=ECOtrtD, weight.type=1, permutations=1000, distance="bray")
###first comparing till to no-till
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "NoTill-Ag" ],
weight.type=1, permutations=10000, distance="bray" )
#p=0.37662
###then comparing till to oldfield
mrpp(SMeso.spM.0p.glog[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "Till-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
mrpp(SMeso.spM.0p.glog[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass", ], ECOtrtD[ECOtrtD== "NoTill-Ag" | ECOtrtD == "OldFldGrass" ],  weight.type=1, permutations=1000, distance="bray" )
library(vegan)
library(RVAideMemoire)
SvFDemergent<-read.csv(file.choose(), header=TRUE)
SvFDseedbank<-read.csv(file.choose(), header=TRUE)
View(SvFDemergent)
View(SvFDseedbank)
View(SvFDemergent)
##deleting the plot label column and turning the data frame into a matrix
SvFDemergent.M<-as.matrix(SvFDemergent[, -1])
SvFDseedbank.M<-as.matrix(SvFDseedbank[, -1])
####checking to make sure the first column with plot labels was deleted
head(SvFDemergent.M)
head(SvFDseedbank.M)
###delete empty columns in both matrices
dim(SvFDemergent.M)
SvFDemergent.M.colsum<-apply(SvFDemergent.M, 2, sum)
SvFDemergent.M.0p<- SvFDemergent.M[,SvFDemergent.M.colsum > 0]
dim(SvFDemergent.M.0p)
SvFDemergent.M.0p
dim(SvFDseedbank.M)
SvFDseedbank.M.colsum<-apply(SvFDseedbank.M, 2, sum)
SvFDseedbank.M.0p<- SvFDseedbank.M[,SvFDseedbank.M.colsum > 0]
dim(SvFDseedbank.M.0p)
###delete empty columns in both matrices
dim(SvFDemergent.M)
dim(SvFDemergent.M.0p)
#####adding treatment descriptions
SvFDtrts<-read.csv(file.choose(), header=TRUE)
SvFDtrts$TillD<-NA
SvFDtrts$TillD[SvFDtrts$TILLAGE==1]<-"Spring"
SvFDtrts$TillD[SvFDtrts$TILLAGE==2]<-"Fall"
head(SvFDtrts)
###turning the treatments/ factors we want to analyze into vectors
Till<-as.factor(SvFDtrts$TillD)
Year<-as.factor(SvFDtrts$YEAR)
Block<-as.factor(SvFDtrts$BLOCK)
TillYr<- as.factor(paste(SvFDtrts$TillD, SvFDtrts$YEAR))
##### perMANOVA on emergent data##### to do this we are using the adonis function
######the strata command is a control on randomization (only randomize within blocks)
##testing without blocking
adonis(SvFDemergent.M.0p~Till, distance="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~Year, distance="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~Till*Year, distance="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~Till+Year, distance="bray", permutations = 999, strata = Block)
View(SvFDtrts)
###testing with blocking
adonis(SvFDemergent.M.0p~ Block + Till, distance="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~ Block + Year, distance="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~ Block + Till*Year, method="bray", permutations = 999, strata = Block)
#NMDS on Emergent community
#For the all diets NMDS
original.dist<-vegdist(SvFDemergent.M.0p)
stress_values<-numeric(6)
r2<-numeric(6)
for (n in 1:6) {
nmds.resu <- metaMDS(SvFDemergent.M.0p, k=n, distance = "bray", try=250, autotransform=F)
stress_values[n]<-nmds.resu$stress
nmds.scores<-scores(nmds.resu)
nmds.dist<-dist(nmds.scores)
r2[n]<-summary(lm(original.dist~nmds.dist))[[8]]
}
plot(stress_values, xlab="Number of axes", ylab="Stress")
abline(h=0.2,col="red")
View(stress_values)
#Go back and create the output for the 2 dimensions NMDS
allCount_NMDS<-metaMDS(SvFDemergent.M.0p, distance = "bray", k = 2, try=250, autotransform=F)
#Go back and create the output for the 2 dimensions NMDS
emergent.NMDS<-metaMDS(SvFDemergent.M.0p, distance = "bray", k = 2, try=250, autotransform=F)
plot(emergent.NMDS)
ordihull(emergent.NMDS,SvFDtrts$TillD)
ordihull(emergent.NMDS,SvFDtrts$TillD,label=T)
#NMDS Seed Bank
original.dist<-vegdist(SvFDseedbank.M.0p)
stress_values<-numeric(6)
r2<-numeric(6)
for (n in 1:6) {
nmds.resu <- metaMDS(SvFDseedbank.M.0p, k=n, distance = "bray", try=250, autotransform=F)
stress_values[n]<-nmds.resu$stress
nmds.scores<-scores(nmds.resu)
nmds.dist<-dist(nmds.scores)
r2[n]<-summary(lm(original.dist~nmds.dist))[[8]]
}
plot(stress_values, xlab="Number of axes", ylab="Stress")
abline(h=0.2,col="red")
View(stress_values)
#Go back and create the output for the 2 dimensions NMDS
seedbank.NMDS<-metaMDS(SvFDseedbank.M.0p, distance = "bray", k = 2, try=250, autotransform=F)
plot(seedbank.NMDS)
ordihull(seedbank.NMDS,SvFDtrts$TillD,label=T)
View(SvFDtrts)
###pairwise comparisons of emergent data
###first we need to create a distance matrix
SvFDemergent.M.0p.b<-vegdist(SvFDemergent.M.0p, method="bray")
pairwise.perm.manova(SvFDemergent.M.0p.b, Till, nperm = 1000)
pairwise.perm.manova(SvFDemergent.M.0p.b, Year, nperm = 1000, p.method = "none")
#to do the two way interaction I had to create a new column that combined tillage and year into a new variable with 6 levels
pairwise.perm.manova(SvFDemergent.M.0p.b, TillYr, nperm = 1000, p.method = "none")
SvFDemergent.M.0p.b
adonis(SvFDemergent.M.0p~ Block + Till*Year, method="bray", permutations = 999, strata = Block)
pairwise.perm.manova(SvFDemergent.M.0p.b, Till, nperm = 1000)
pairwise.perm.manova(SvFDemergent.M.0p.b, Year, nperm = 1000, p.method = "none")
#to do the two way interaction I had to create a new column that combined tillage and year into a new variable with 6 levels (in the vectors above)
pairwise.perm.manova(SvFDemergent.M.0p.b, TillYr, nperm = 1000, p.method = "none")
pairwise.perm.manova(SvFDemergent.M.0p.b, Block, nperm = 1000, p.method = "none")
#to do the two way interaction I had to create a new column that combined tillage and year into a new variable with 6 levels (in the vectors above)
pairwise.perm.manova(SvFDemergent.M.0p.b, paste(TillYr,Block), nperm = 1000, p.method = "none")
#to do the two way interaction I had to create a new column that combined tillage and year into a new variable with 6 levels (in the vectors above)
pairwise.perm.manova(SvFDemergent.M.0p.b, as.factor(paste(TillYr,Block)), nperm = 1000, p.method = "none")
###########perMANOVA on seedbank analysis################
##testing without blocking
adonis(SvFDseedbank.M.0p~Till, distance="bray", permutations = 999)
adonis(SvFDseedbank.M.0p~Year, distance="bray", permutations = 999)
adonis(SvFDseedbank.M.0p~Till*Year, distance="bray", permutations = 999)
adonis(SvFDseedbank.M.0p~Till+Year, distance="bray", permutations = 999)
###testing with blocking
adonis(SvFDseedbank.M.0p~ Block + Till, distance="bray", permutations = 999, strata = Block)
adonis(SvFDseedbank.M.0p~ Block + Year, distance="bray", permutations = 999, strata = Block)
adonis(SvFDseedbank.M.0p~ Block + Till*Year, method="bray", permutations = 999, strata = Block)
###pairwise comparisons of emergent data
SvFDseedbank.M.0p.b<-vegdist(SvFDseedbank.M.0p, method="bray")
pairwise.perm.manova(SvFDseedbank.M.0p.b, Till, nperm = 1000)
pairwise.perm.manova(SvFDseedbank.M.0p.b, Year, nperm = 1000, p.method = "none")
### had to create a new variable Tillyr to look at pairwise within interaction
pairwise.perm.manova(SvFDseedbank.M.0p.b, TillYr, nperm = 1000, p.method = "none")
###Are the matrices correlated
###first you need to transform the species matrices into distance matrices
SvFDemergent.M.0p.b<-vegdist(SvFDemergent.M.0p, method="bray", diag=TRUE, upper=TRUE)
SvFDseedbank.M.0p.b<-vegdist(SvFDseedbank.M.0p, method="bray", diag=TRUE, upper=TRUE)
mantel(SvFDemergent.M.0p.b, SvFDseedbank.M.0p.b, method="spearman", permutations=999)
mantel(SvFDemergent.M.0p.b, SvFDseedbank.M.0p.b, method="spearman", permutations=999)
mantel(SvFDemergent.M.0p.b, SvFDseedbank.M.0p.b, method="spearman", permutations=999)
SvFDemergent.M.0p.F<-SvFDemergent.M.0p[SvFDtrts$TillD=="Fall",]
SvFDemergent.M.0p.S<-SvFDemergent.M.0p[SvFDtrts$TillD=="Spring",]
SvFDseedbank.M.0p.F<-SvFDseedbank.M.0p[SvFDtrts$TillD=="Fall",]
SvFDseedbank.M.0p.S<-SvFDseedbank.M.0p[SvFDtrts$TillD=="Spring",]
###then we need to turn each separate matrix into a distance matrix
SvFDemergent.M.0p.F.b<-vegdist(SvFDemergent.M.0p.F, method="bray")
SvFDemergent.M.0p.S.b<-vegdist(SvFDemergent.M.0p.S, method="bray")
SvFDseedbank.M.0p.F.b<-vegdist(SvFDseedbank.M.0p.F, method="bray")
SvFDseedbank.M.0p.S.b<-vegdist(SvFDseedbank.M.0p.S, method="bray")
##testing correlation between community matrices with fall tillage
mantel(SvFDemergent.M.0p.F.b, SvFDseedbank.M.0p.F.b, method="spearman", permutations=999)
##testing correlation between community matrices with spring tillage
mantel(SvFDemergent.M.0p.S.b, SvFDseedbank.M.0p.S.b, method="spearman", permutations=999)
envfit(seedbank.NMDS,SvFDtrts,permutations = 999)
fit<-envfit(seedbank.NMDS,SvFDtrts,permutations = 999)
plot(seedbank.NMDS)
lines(fit)
fit$vectors$arrows
lines(fit$vectors$arrows)
lines(fit$vectors$arrows[1])
plot(seedbank.NMDS)
lines(fit$vectors$arrows[1])
lines(c(0,0),fit$vectors$arrows[1])
fit$vectors$arrows[1]
lines(c(0,0),fit$vectors$arrows[1,])
lines(c(0,fit$vectors$arrows[1,1]),c(0,fit$vectors$arrows[1,2]))
plot(seedbank.NMDS)
lines(c(0,fit$vectors$arrows[1,1]),c(0,fit$vectors$arrows[1,2]))
ordihull(seedbank.NMDS,SvFDtrts$YEAR,label=T)
plot(seedbank.NMDS,display = "sites")
lines(c(0,fit$vectors$arrows[1,1]),c(0,fit$vectors$arrows[1,2]))
ordihull(seedbank.NMDS,SvFDtrts$YEAR,label=T)
#Skewness and Kurtosis
apply(SvFDemergent.M.0p, 1, skewness)
library(moments)
#Skewness and Kurtosis
apply(SvFDemergent.M.0p, 1, skewness)
apply(SvFDemergent.M.0p, 1, kurtosis)
apply(SvFDemergent.M.0p, 1, mean)
apply(SvFDemergent.M.0p, 1, sd)
apply(SvFDemergent.M.0p, 2, skewness)
apply(SvFDemergent.M.0p, 2, kurtosis)
apply(SvFDemergent.M.0p, 2, mean)
apply(SvFDemergent.M.0p, 2, sd)
#MRPP
seedbank_MRPP<-mrpp(SvFDseedbank.M.0p, group=TillYr, weight.type=1, permutations=1000, distance="bray") #The years are very different from each other
seedbank_MRPP
#MRPP
seedbank_MRPP<-mrpp(SvFDseedbank.M.0p, group=Till, weight.type=1, permutations=1000, distance="bray") #The years are very different from each other
seedbank_MRPP
#MRPP
seedbank_MRPP<-mrpp(SvFDseedbank.M.0p, group=Year, weight.type=1, permutations=1000, distance="bray") #The years are very different from each other
seedbank_MRPP
emergent_MRPP<-mrpp(SvFDemergent.M.0p, group=Year, weight.type=1, permutations=1000, distance="bray") #The years are very different from each other
emergent_MRPP
emergent_MRPP<-mrpp(SvFDemergent.M.0p, group=Till, weight.type=1, permutations=1000, distance="bray") #The years are very different from each other
emergent_MRPP
#ISA to see what diet items might be associated with the different years that make them different from each other
emergent_ISA = multipatt(as.data.frame(SvFDseedbank.M.0p), Till, func = "IndVal.g", duleg=TRUE, control = how(nperm=4999))
library(indicspecies)
#ISA to see what diet items might be associated with the different years that make them different from each other
emergent_ISA = multipatt(as.data.frame(SvFDseedbank.M.0p), Till, func = "IndVal.g", duleg=TRUE, control = how(nperm=4999))
emergent_ISA
emergent_ISA$str
emergent_ISA$sign
summary(emergent_ISA$sign)
summary(emergent_ISA)
###Are the matrices correlated
###first you need to transform the species matrices into distance matrices
SvFDemergent.M.0p.b<-vegdist(SvFDemergent.M.0p, method="bray", diag=TRUE, upper=TRUE)
SvFDseedbank.M.0p.b<-vegdist(SvFDseedbank.M.0p, method="bray", diag=TRUE, upper=TRUE)
mantel(SvFDemergent.M.0p.b, SvFDseedbank.M.0p.b, method="spearman", permutations=999)
#ISA to see what diet items might be associated with the different years that make them different from each other
emergent_ISA = multipatt(as.data.frame(SvFDemergent.M.0p), Till, func = "IndVal.g", duleg=TRUE, control = how(nperm=4999))
summary(emergent_ISA)
###Are the matrices correlated
###first you need to transform the species matrices into distance matrices
SvFDemergent.M.0p.b<-vegdist(SvFDemergent.M.0p, method="bray", diag=TRUE, upper=TRUE)
SvFDseedbank.M.0p.b<-vegdist(SvFDseedbank.M.0p, method="bray", diag=TRUE, upper=TRUE)
mantel(SvFDemergent.M.0p.b, SvFDseedbank.M.0p.b, method="spearman", permutations=999)
SvFDemergent.M.0p.F<-SvFDemergent.M.0p[SvFDtrts$TillD=="Fall",]
SvFDemergent.M.0p.S<-SvFDemergent.M.0p[SvFDtrts$TillD=="Spring",]
SvFDseedbank.M.0p.F<-SvFDseedbank.M.0p[SvFDtrts$TillD=="Fall",]
SvFDseedbank.M.0p.S<-SvFDseedbank.M.0p[SvFDtrts$TillD=="Spring",]
###then we need to turn each separate matrix into a distance matrix
SvFDemergent.M.0p.F.b<-vegdist(SvFDemergent.M.0p.F, method="bray")
SvFDemergent.M.0p.S.b<-vegdist(SvFDemergent.M.0p.S, method="bray")
SvFDseedbank.M.0p.F.b<-vegdist(SvFDseedbank.M.0p.F, method="bray")
SvFDseedbank.M.0p.S.b<-vegdist(SvFDseedbank.M.0p.S, method="bray")
##testing correlation between community matrices with fall tillage
mantel(SvFDemergent.M.0p.F.b, SvFDseedbank.M.0p.F.b, method="spearman", permutations=999)
##testing correlation between community matrices with spring tillage
mantel(SvFDemergent.M.0p.S.b, SvFDseedbank.M.0p.S.b, method="spearman", permutations=999)
#ISA to see what diet items might be associated with the different years that make them different from each other
emergent_ISA = multipatt(as.data.frame(SvFDemergent.M.0p), Till, func = "IndVal.g", duleg=TRUE, control = how(nperm=4999))
summary(emergent_ISA)
adonis(SvFDseedbank.M.0p~ Block + Till*Year, method="bray", permutations = 999, strata = Block)
adonis(SvFDemergent.M.0p~ Block + Till*Year, method="bray", permutations = 999, strata = Block)
plot(seedbank.NMDS,display = "sites")
football<-read.csv("C:/Users/nh1087/Documents/MATH 839-LReg/HMWK 4/NCAAFootball2005.csv")
View(football)
summary(flm<-lm(Win_Pct~2:19,data=football))
football[2:19]
summary(flm<-lm(Win_Pct~colname(football[2:19]),data=football))
summary(flm<-lm(Win_Pct~colnames(football[2:19]),data=football))
summary(flm<-lm(Win_Pct~paste(colnames(football[2:19]),collapse="+"),data=football))
paste(colnames(football[2:19]),collapse="+")
tires<-read.csv("C:/Users/nh1087/Documents/MATH 839-LReg/HMWK 4/TireTreadDOE.csv")
summary(tire<-lm(y~x1+x2+x3,data=tires))
continuous_x <- rnorm(10,10,3)
character_x  <- (rep(c("dog","cat"),5))
character_x_value <- ifelse(character_x == "dog", 5*rnorm(1,0,1), rnorm(1,0,2))
continuous_y <- continuous_x*10*rnorm(1,0) + character_x_value
summary(lm(continuous_y ~ continuous_x + factor_x))
factor_x <- as.factor(character_x)
summary(lm(continuous_y ~ continuous_x + factor_x))
summary(lm(continuous_y ~ continuous_x + character_x))
log(-2.41)+0.527*log(150)
exp(-2.41+0.527*log(150))
exp(-2.41+0.527*log(150))+3.296
3.6/0.038
exp(3.433+0.527*log(94.7)+3.026)
exp(3.433+0.527*log(94.7)+3.026)*0.000001
4800000*0.000001
# Actual data ---------------------------------------------------
set.seed(42)
setwd("UNH Research/Hammer_Hermann/Data/") #Nate's file structure
library(tidyverse)
library(ggplot2)
library(reshape2)
library(tidyr)
install.packages("rlang")
install.packages("rlang")
